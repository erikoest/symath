#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

require 'sy'

module Sy
class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 46)
  attr_reader :exp

  def function(name, subnodes)
    args = subnodes

    # If name is a built-in operator, create it rather than a function
    name = 'flat' if name.eql?('b')
    if name.include? "'"
      raise ParseError, "\nparse error on function name '#{name}'"
    end

    if Sy::Operator.is_builtin?(name.to_sym)
      return op(name, *args)
    else
      return fn(name, *args)
    end
  end

  # Create a variable or constant
  def named_node(name)
    if name.length >= 2 and name.match(/^d/)
      name = name[1..-1]
      return name.to_m('dform')
    end

    if name.match(/\'$/)
      name = name[0..-2]
      return name.to_m('vector')
    end

    return name.to_m
  end
	
  def parse(str)
    @q = []

    cmd = [
      'eval',
      'normalize',
      'expand',
      'factorize',
      'factorize_simple',
      'combine_fractions',
    ]

    until str.empty?
      case str
      when /\A\s+/
        # whitespace, do nothing
      when *cmd
        # command
        @q.push [:CMD, $&]
      when /\A[A-Za-z_]+[A-Za-z_0-9]*\'?/
        # name (char + (char|num))
        @q.push [:NAME, $&]
      when /\A\d+(\.\d+)?/
        # number (digits.digits)
        @q.push [:NUMBER, $&]
      when /\A\*\*/
        # two character operators
        s = $&
        @q.push [s, s]
      when /\A.|\n/o
        # other signs
        s = $&
        @q.push [s, s]
      end
      str = $'
    end
    @q.push [false, '$end']
    exp = do_parse
    return if exp.nil?

    return exp
  end

  def next_token()
    @q.shift
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    18,    15,    16,    17,    13,    14,    12,    22,     5,    23,
     3,     4,    11,    41,     7,     8,     9,    10,     5,    27,
     3,     4,    28,    43,     7,     8,     9,    10,     5,    44,
     3,     4,    18,    18,     7,     8,     9,    10,     5,    18,
     3,     4,    42,   nil,     7,     8,     9,    10,     5,   nil,
     3,     4,   nil,   nil,     7,     8,     9,    10,     5,   nil,
     3,     4,   nil,   nil,     7,     8,     9,    10,     5,   nil,
     3,     4,   nil,   nil,     7,     8,     9,    10,     5,   nil,
     3,     4,   nil,   nil,     7,     8,     9,    10,     5,   nil,
     3,     4,   nil,   nil,     7,     8,     9,    10,     5,   nil,
     3,     4,   nil,   nil,     7,     8,     9,    10,     5,   nil,
     3,     4,   nil,   nil,     7,     8,     9,    10,     5,   nil,
     3,     4,   nil,   nil,     7,     8,     9,    10,    18,    15,
    16,    17,    13,    14,    12,   nil,     5,    36,     3,     4,
    38,   nil,     7,     8,     9,    10,     5,   nil,     3,     4,
   nil,   nil,     7,     8,     9,    10,    18,    15,    16,    17,
    13,    14,    12,   nil,     5,    45,     3,     4,   nil,   nil,
     7,     8,     9,    10,    18,    15,    16,    17,    13,    14,
    12,    24,   nil,   nil,     7,     8,     9,    10,    18,    15,
    16,    17,    13,    14,    12,    18,    15,    16,    17,    13,
    14,    12,    18,    15,    16,    17,    13,    14,    18,    15,
    16,    17,    13,    14,    18,    15,    16,    17,    18,    15,
    16,    17 ]

racc_action_check = [
    26,    26,    26,    26,    26,    26,    26,     7,     0,     7,
     0,     0,     1,    26,     0,     0,     0,     0,     3,    10,
     3,     3,    11,    39,     3,     3,     3,     3,     4,    39,
     4,     4,    32,    33,     4,     4,     4,     4,     5,    34,
     5,     5,    36,   nil,     5,     5,     5,     5,     9,   nil,
     9,     9,   nil,   nil,     9,     9,     9,     9,    12,   nil,
    12,    12,   nil,   nil,    12,    12,    12,    12,    13,   nil,
    13,    13,   nil,   nil,    13,    13,    13,    13,    14,   nil,
    14,    14,   nil,   nil,    14,    14,    14,    14,    15,   nil,
    15,    15,   nil,   nil,    15,    15,    15,    15,    16,   nil,
    16,    16,   nil,   nil,    16,    16,    16,    16,    17,   nil,
    17,    17,   nil,   nil,    17,    17,    17,    17,    18,   nil,
    18,    18,   nil,   nil,    18,    18,    18,    18,    20,    20,
    20,    20,    20,    20,    20,   nil,    22,    20,    22,    22,
    22,   nil,    22,    22,    22,    22,    24,   nil,    24,    24,
   nil,   nil,    24,    24,    24,    24,    40,    40,    40,    40,
    40,    40,    40,   nil,    44,    40,    44,    44,   nil,   nil,
    44,    44,    44,    44,     2,     2,     2,     2,     2,     2,
     2,     8,   nil,   nil,     8,     8,     8,     8,    37,    37,
    37,    37,    37,    37,    37,    46,    46,    46,    46,    46,
    46,    46,    19,    19,    19,    19,    19,    19,    29,    29,
    29,    29,    29,    29,    30,    30,    30,    30,    31,    31,
    31,    31 ]

racc_action_pointer = [
     0,    12,   171,    10,    20,    30,   nil,    -4,   170,    40,
     6,    22,    50,    60,    70,    80,    90,   100,   110,   199,
   125,   nil,   128,   nil,   138,   nil,    -3,   nil,   nil,   205,
   211,   215,    29,    30,    36,   nil,    29,   185,   nil,    11,
   153,   nil,   nil,   nil,   156,   nil,   192 ]

racc_action_default = [
    -2,   -26,    -1,   -26,   -26,   -26,   -14,   -22,   -26,   -26,
   -20,   -26,   -26,   -26,   -26,   -26,   -26,   -26,   -26,    -3,
   -26,   -13,   -26,   -23,   -26,   -18,   -26,   -21,    47,    -4,
    -5,    -6,    -7,    -8,    -9,   -10,   -12,   -25,   -15,   -26,
   -26,   -19,   -11,   -16,   -26,   -17,   -24 ]

racc_goto_table = [
     2,     1,    25,    19,    20,    21,    39,   nil,   nil,    26,
   nil,   nil,    29,    30,    31,    32,    33,    34,    35,   nil,
   nil,   nil,    37,   nil,    40,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    46 ]

racc_goto_check = [
     2,     1,     3,     2,     2,     2,     4,   nil,   nil,     2,
   nil,   nil,     2,     2,     2,     2,     2,     2,     2,   nil,
   nil,   nil,     2,   nil,     2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     1,     0,    -6,   -16 ]

racc_goto_default = [
   nil,   nil,   nil,     6,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 20, :_reduce_none,
  0, 20, :_reduce_2,
  2, 21, :_reduce_3,
  3, 21, :_reduce_4,
  3, 21, :_reduce_5,
  3, 21, :_reduce_6,
  3, 21, :_reduce_7,
  3, 21, :_reduce_8,
  3, 21, :_reduce_9,
  3, 21, :_reduce_10,
  4, 21, :_reduce_11,
  3, 21, :_reduce_12,
  2, 21, :_reduce_13,
  1, 21, :_reduce_none,
  3, 22, :_reduce_15,
  4, 22, :_reduce_16,
  4, 22, :_reduce_17,
  2, 22, :_reduce_18,
  3, 22, :_reduce_19,
  1, 22, :_reduce_20,
  2, 22, :_reduce_21,
  1, 22, :_reduce_22,
  2, 22, :_reduce_23,
  3, 23, :_reduce_24,
  1, 23, :_reduce_25 ]

racc_reduce_n = 26

racc_shift_n = 47

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  "**" => 3,
  "*" => 4,
  "/" => 5,
  "^" => 6,
  "+" => 7,
  "-" => 8,
  "=" => 9,
  :CMD => 10,
  "(" => 11,
  ")" => 12,
  "!" => 13,
  :NAME => 14,
  "#" => 15,
  "|" => 16,
  :NUMBER => 17,
  "," => 18 }

racc_nt_base = 19

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "\"**\"",
  "\"*\"",
  "\"/\"",
  "\"^\"",
  "\"+\"",
  "\"-\"",
  "\"=\"",
  "CMD",
  "\"(\"",
  "\")\"",
  "\"!\"",
  "NAME",
  "\"#\"",
  "\"|\"",
  "NUMBER",
  "\",\"",
  "$start",
  "target",
  "exp",
  "func",
  "args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 13)
  def _reduce_2(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_3(val, _values, result)
     result = val[1].send(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 15)
  def _reduce_4(val, _values, result)
     result = Sy::Equation(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 16)
  def _reduce_5(val, _values, result)
     result = val[0].add(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_6(val, _values, result)
     result = val[0].sub(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_7(val, _values, result)
     result = val[0].mul(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 19)
  def _reduce_8(val, _values, result)
     result = val[0].div(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_9(val, _values, result)
     result = val[0].wedge(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_10(val, _values, result)
     result = val[0].power(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 22)
  def _reduce_11(val, _values, result)
     result = function('fact', [val[1]])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_12(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_13(val, _values, result)
     result = val[1].neg
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.y', 27)
  def _reduce_15(val, _values, result)
     result = function(val[0], [])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_16(val, _values, result)
     result = function(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_17(val, _values, result)
     result = function('sharp', [val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_18(val, _values, result)
     result = function('sharp', [val[1]])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_19(val, _values, result)
     result = function('abs', [val[1]])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_20(val, _values, result)
     result = val[0].to_i.to_m
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 33)
  def _reduce_21(val, _values, result)
     result = function('fact', [val[0].to_i.to_m])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_22(val, _values, result)
     result = named_node(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_23(val, _values, result)
     result = function('fact', [named_node(val[0])])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_24(val, _values, result)
     result = val[0].push(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_25(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

end
