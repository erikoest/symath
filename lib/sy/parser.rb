#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'sy'
require 'sy/node'

module Sy
class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 41)
  attr_reader :exp

  def named_value(node)
if (node.val.match(/^(pi|e|i)$/)) then
      return leaf('Sy::ConstantSymbol', node)
    end
    return leaf('Sy::Variable', node)
  end

  def operator(clazz, subnodes, pos)
    args = subnodes.map { |s| s.val }
    paths = [Sy::Path.new([], pos.paths[0].pos)]
    (0...subnodes.length).to_a.each { |i| paths += subnodes[i].paths.map { |p| p.unshift(i) } }
    return Sy::Node.new(Kernel.const_get(clazz).new(*args), paths)
  end

  def function(name, subnodes)
    args = subnodes.map { |s| s.val }
    paths = name.paths.clone
    (0...subnodes.length).to_a.each { |i| paths += subnodes[i].paths.map { |p| p.unshift(i) } }

    # If name is a built-in operator, create it rather than a function
    if Sy::Operator.builtin_operators.member?(name.val.to_sym)
      return Sy::Node.new(op(name.val, *args), paths)
    end
    
    return Sy::Node.new(Sy::Function.new(name.val, args), paths)
  end

  def leaf(clazz, name)
    if clazz.eql?('Sy::Variable')
      n = name.val
      t = 'real'
     if n =~ /^d/
       n = n[1..-1]
       t = 'dform'
     end
     return Sy::Node.new(Sy::Variable.new(n,t), name.paths)
    end
    
    return Sy::Node.new(Kernel.const_get(clazz).new(name.val), name.paths)
  end

  def parse(str)
    @q = []

    pos = 0
    until str.empty?
      case str
      when /\A\s+/
        # whitespace, do nothing
      when /\A[A-Za-z_]+[A-Za-z_0-9]*/
        # name (char + (char|num))
        @q.push [:NAME, Sy::Node.new($&, [Sy::Path.new([], pos)])]
      when /\A\d+(\.\d+)?/
        # number (digits.digits)
        @q.push [:NUMBER, Sy::Node.new($&, [Sy::Path.new([], pos)])]
      when /\A\*\*/
        # two character operators
        s = $&
        @q.push [s, Sy::Node.new(s, [Sy::Path.new([], pos)])]
      when /\A.|\n/o
        # other signs
        s = $&
        @q.push [s, Sy::Node.new(s, [Sy::Path.new([], pos)])]
      end
      pos += str.length - $'.length
      str = $'
    end
    @q.push [false, '$end']
    nodes = do_parse
    return if nodes == 0

    @paths = nodes.paths
    @exp = nodes.val
    # dump_paths

    return nodes.val
  end

  def dump_paths
    @paths.each do |p|
      puts sprintf("%d %s %s", p.pos, p.path, @val.seek(p).to_s)
    end
  end

  def paths_by_position(pos)
    # find highest position < pos
    highest = @paths.map { |p| p.pos <= pos ? p.pos : 0 }.max
    # return all paths having the highest position (can be multiple)
    return @paths.select { |p| p.pos == highest }.sort
  end
  
  def next_token()
    @q.shift
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    17,    14,    15,    16,    12,    13,    11,    17,    14,    15,
    16,    36,    17,    14,    15,    16,    12,    13,    11,    10,
    31,    17,    14,    15,    16,    12,    13,    11,     4,    39,
     3,    20,     6,     7,     8,     9,     4,    21,     3,    23,
     6,     7,     8,     9,     4,    17,     3,    17,     6,     7,
     8,     9,     4,    17,     3,   nil,     6,     7,     8,     9,
     4,   nil,     3,   nil,     6,     7,     8,     9,     4,   nil,
     3,   nil,     6,     7,     8,     9,     4,   nil,     3,   nil,
     6,     7,     8,     9,     4,   nil,     3,   nil,     6,     7,
     8,     9,     4,   nil,     3,   nil,     6,     7,     8,     9,
     4,   nil,     3,   nil,     6,     7,     8,     9,     4,   nil,
     3,   nil,     6,     7,     8,     9,     4,   nil,     3,    33,
     6,     7,     8,     9,     4,   nil,     3,   nil,     6,     7,
     8,     9,     4,   nil,     3,   nil,     6,     7,     8,     9,
    17,    14,    15,    16,    12,    13,    11,    17,    14,    15,
    16,    12,    13,    11,    17,    14,    15,    16,    12,    13,
    11,    17,    14,    15,    16,    12,    13,    37,    17,    14,
    15,    16,    38 ]

racc_action_check = [
    22,    22,    22,    22,    22,    22,    22,    25,    25,    25,
    25,    22,    18,    18,    18,    18,    18,    18,    18,     1,
    18,    35,    35,    35,    35,    35,    35,    35,     0,    35,
     0,     6,     0,     0,     0,     0,     3,     7,     3,    10,
     3,     3,     3,     3,     4,    27,     4,    28,     4,     4,
     4,     4,     8,    29,     8,   nil,     8,     8,     8,     8,
    11,   nil,    11,   nil,    11,    11,    11,    11,    12,   nil,
    12,   nil,    12,    12,    12,    12,    13,   nil,    13,   nil,
    13,    13,    13,    13,    14,   nil,    14,   nil,    14,    14,
    14,    14,    15,   nil,    15,   nil,    15,    15,    15,    15,
    16,   nil,    16,   nil,    16,    16,    16,    16,    17,   nil,
    17,   nil,    17,    17,    17,    17,    20,   nil,    20,    20,
    20,    20,    20,    20,    21,   nil,    21,   nil,    21,    21,
    21,    21,    38,   nil,    38,   nil,    38,    38,    38,    38,
     2,     2,     2,     2,     2,     2,     2,    32,    32,    32,
    32,    32,    32,    32,    40,    40,    40,    40,    40,    40,
    40,    24,    24,    24,    24,    24,    24,    34,    26,    26,
    26,    26,    34 ]

racc_action_pointer = [
    20,    19,   137,    28,    36,   nil,    21,    27,    44,   nil,
    39,    52,    60,    68,    76,    84,    92,   100,     9,   nil,
   108,   116,    -3,   nil,   158,     4,   165,    42,    44,    50,
   nil,   nil,   144,   nil,   156,    18,   nil,   nil,   124,   nil,
   151 ]

racc_action_default = [
    -2,   -21,    -1,   -21,   -21,   -12,   -18,   -21,   -21,   -17,
   -21,   -21,   -21,   -21,   -21,   -21,   -21,   -21,   -21,   -11,
   -21,   -21,   -21,    41,    -3,    -4,    -5,    -6,    -7,    -8,
    -9,   -10,   -20,   -13,   -21,   -21,   -16,   -14,   -21,   -15,
   -19 ]

racc_goto_table = [
     2,     1,    34,    18,    19,   nil,   nil,   nil,    22,   nil,
   nil,    24,    25,    26,    27,    28,    29,    30,   nil,   nil,
    32,    35,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40 ]

racc_goto_check = [
     2,     1,     4,     2,     2,   nil,   nil,   nil,     2,   nil,
   nil,     2,     2,     2,     2,     2,     2,     2,   nil,   nil,
     2,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     1,     0,   nil,   -18 ]

racc_goto_default = [
   nil,   nil,   nil,     5,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 18, :_reduce_none,
  0, 18, :_reduce_2,
  3, 19, :_reduce_3,
  3, 19, :_reduce_4,
  3, 19, :_reduce_5,
  3, 19, :_reduce_6,
  3, 19, :_reduce_7,
  3, 19, :_reduce_8,
  3, 19, :_reduce_9,
  3, 19, :_reduce_10,
  2, 19, :_reduce_11,
  1, 19, :_reduce_none,
  3, 20, :_reduce_13,
  4, 20, :_reduce_14,
  4, 20, :_reduce_15,
  3, 20, :_reduce_16,
  1, 20, :_reduce_17,
  1, 20, :_reduce_18,
  3, 21, :_reduce_19,
  1, 21, :_reduce_20 ]

racc_reduce_n = 21

racc_shift_n = 41

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  "**" => 3,
  "*" => 4,
  "/" => 5,
  "^" => 6,
  "+" => 7,
  "-" => 8,
  "=" => 9,
  "(" => 10,
  ")" => 11,
  :NAME => 12,
  "#" => 13,
  "|" => 14,
  :NUMBER => 15,
  "," => 16 }

racc_nt_base = 17

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "\"**\"",
  "\"*\"",
  "\"/\"",
  "\"^\"",
  "\"+\"",
  "\"-\"",
  "\"=\"",
  "\"(\"",
  "\")\"",
  "NAME",
  "\"#\"",
  "\"|\"",
  "NUMBER",
  "\",\"",
  "$start",
  "target",
  "exp",
  "func",
  "args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 12)
  def _reduce_2(val, _values, result)
     result = 0 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 13)
  def _reduce_3(val, _values, result)
     result = operator('Sy::Equation', [val[0], val[2]], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_4(val, _values, result)
     result = operator('Sy::Sum', [val[0], val[2]], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 15)
  def _reduce_5(val, _values, result)
     result = operator('Sy::Subtraction', [val[0], val[2]], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 16)
  def _reduce_6(val, _values, result)
     result = operator('Sy::Product', [val[0], val[2]], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_7(val, _values, result)
     result = operator('Sy::Fraction', [val[0], val[2]], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_8(val, _values, result)
     result = operator('Sy::Wedge', [val[0], val[2]], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 19)
  def _reduce_9(val, _values, result)
     result = operator('Sy::Power', [val[0], val[2]], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_10(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_11(val, _values, result)
     result = operator('Sy::Minus', [val[1]], val[0]) 
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_13(val, _values, result)
     result = function(val[0], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_14(val, _values, result)
     result = function(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_15(val, _values, result)
     result = function('sharp', [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 27)
  def _reduce_16(val, _values, result)
     result = function('abs', [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_17(val, _values, result)
     result = leaf('Sy::Number', val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_18(val, _values, result)
     result = self.named_value(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_19(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_20(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

end
